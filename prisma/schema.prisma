generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Application {
  id           Int                @id @default(autoincrement())
  userId       Int
  jobPostingId Int
  status       Application_status
  appliedAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  resume       String?             @db.Text
  JobPosting   JobPosting         @relation(fields: [jobPostingId], references: [id])
  User         User               @relation(fields: [userId], references: [id])

  @@unique([userId, jobPostingId], map: "Application_userId_jobPostingId_uk")
  @@index([jobPostingId], map: "Application_jobPostingId_fkey")
  @@index([userId], map: "Application_userId_fkey")
}

model Bookmark {
  id           Int        @id @default(autoincrement())
  userId       Int
  jobPostingId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  JobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])
  User         User       @relation(fields: [userId], references: [id])

  @@unique([userId, jobPostingId], map: "Bookmark_userJob_unique")
  @@index([jobPostingId], map: "Bookmark_jobPostingId_fkey")
  @@index([userId], map: "Bookmark_userId_fkey")
}

model Company {
  id            Int             @id
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  description   String?         @db.Text
  JobPosting    JobPosting[]
  CompanyReview CompanyReview[]
}

model CompanyReview {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  rating    Int      @default(0) // 1~5 사이의 평점
  content   String // 리뷰 내용
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPosting {
  id                  Int                 @id
  title               String
  description         String              @db.Text
  hireRound           String?             @db.Text
  benefits            String?             @db.Text
  companyId           Int
  closingDate         DateTime?
  salary              Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  region              JobPosting_region
  views               Int                 @default(0)
  locationDescription String?
  annualFrom          Int                 @default(0)
  annualTo            Int                 @default(0)
  image               String?
  DeveloperPosition   DeveloperPosition[]
  Application         Application[]
  Bookmark            Bookmark[]
  Company             Company             @relation(fields: [companyId], references: [id])
  TechStack           TechStack[]

  @@index([companyId], map: "JobPosting_companyId_fkey")
}

model DeveloperPosition {
  id       Int          @id
  name     String       @unique // Enum 값을 문자열로 저장
  postings JobPosting[] // 다대다 관계
}

model TechStack {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  JobPosting JobPosting[]
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  hashedPassword String
  role           User_role       @default(USER)
  Application    Application[]
  Bookmark       Bookmark[]
  CompanyReview  CompanyReview[]
}

enum Application_status {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

enum User_role {
  ADMIN
  USER
}

enum JobPosting_region {
  SEOUL
  GYEONGGI
  GWANGJU
  DAEGU
  DAEJEON
  BUSAN
  ULSAN
  INCHEON
  GANGWON
  GYEONGNAM
  GYEONGBUK
  JEONNAM
  JEONBUK
  CHUNGBUK
  CHUNGNAM
  JEJU
  SEJONG
}
