generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Application {
  id           Int                @id @default(autoincrement())
  userId       Int
  jobPostingId Int
  status       Application_status
  appliedAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  resumeUrl    String?
  coverLetter  String?
  JobPosting   JobPosting         @relation(fields: [jobPostingId], references: [id])
  User         User               @relation(fields: [userId], references: [id])

  @@index([jobPostingId], map: "Application_jobPostingId_fkey")
  @@index([userId], map: "Application_userId_fkey")
}

model Bookmark {
  id           Int        @id @default(autoincrement())
  userId       Int
  jobPostingId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  JobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])
  User         User       @relation(fields: [userId], references: [id])

  @@unique([userId, jobPostingId], map: "Bookmark_userJob_unique")
  @@index([jobPostingId], map: "Bookmark_jobPostingId_fkey")
  @@index([userId], map: "Bookmark_userId_fkey")
}

model Company {
  id           Int      @id @default(autoincrement())
  name         String
  introduction String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  address String?
  website String?

  JobPosting JobPosting[]
}

model JobPosting {
  id                  Int     @id
  title               String //타이틀이랑 포지션이랑 같음
  description         String  @db.Text
  locationDescription String?

  image        String?
  closingDate  DateTime
  salary       Int
  region       JobPosting_region
  techStack    TechStack[]
  minimumYears Int               @default(0) // 최소 연차 필드 추가

  companyId Int
  Company   Company @relation(fields: [companyId], references: [id])

  Application Application[]
  Bookmark    Bookmark[]

  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId], map: "JobPosting_companyId_fkey")
}

model TechStack {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  JobPosting JobPosting[]
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  hashedPassword String
  role           User_role     @default(USER)
  Application    Application[]
  Bookmark       Bookmark[]
}

enum Application_status {
  PENDING
  ACCEPTED
  REJECTED
}

// enum Company_companySize {
//   LARGE_COMPANY
//   SMALL_COMPANY
//   MEDIUM_COMPANY
//   STARTUP
//   PUBLIC
//   OTHER
// }

// enum JobPosting_jobType {
//   FULL_TIME
//   CONTRACT
//   INTERN
// }

enum User_role {
  ADMIN
  USER
}

enum JobPosting_region {
  SEOUL
  GYEONGGI
  GWANGJU
  DAEGU
  DAEJEON
  BUSAN
  ULSAN
  INCHEON
  GANGWON
  GYEONGNAM
  GYEONGBUK
  JEONNAM
  JEONBUK
  CHUNGBUK
  CHUNGNAM
  JEJU
  SEJONG
}

enum DeveloperPosition {
  SOFTWARE_ENGINEER
  SERVER_DEVELOPER
  WEB_DEVELOPER
  JAVA_DEVELOPER
  FRONTEND_DEVELOPER
  PYTHON_DEVELOPER
  C_CPP_DEVELOPER
  MACHINE_LEARNING_ENGINEER
  DATA_ENGINEER
  NODEJS_DEVELOPER
  DEVOPS_ENGINEER
  ANDROID_DEVELOPER
  EMBEDDED_DEVELOPER
  QA_TEST_ENGINEER
  DATA_SCIENTIST
  IOS_DEVELOPER
  SECURITY_ENGINEER
  HARDWARE_ENGINEER
  BIG_DATA_ENGINEER
  BLOCKCHAIN_PLATFORM_ENGINEER
  GRAPHICS_ENGINEER
  CROSS_PLATFORM_APP_DEVELOPER
  CTO
  CIO
  ERP_EXPERT
  BI_ENGINEER
  VR_ENGINEER
}
